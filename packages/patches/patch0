--- src/docker/docker.cpp	2016-03-08 14:24:05.159018550 -0800
+++ src/docker/docker.cpp	2016-03-08 14:25:41.847017335 -0800
@@ -301,19 +301,47 @@
 
   bool started = startedAtValue.get().value != "0001-01-01T00:00:00Z";
 
-  Result<JSON::String> ipAddressValue =
-    json.find<JSON::String>("NetworkSettings.IPAddress");
-  if (ipAddressValue.isNone()) {
-    return Error("Unable to find NetworkSettings.IPAddress in container");
-  } else if (ipAddressValue.isError()) {
-    return Error(
-        "Error finding NetworkSettings.Name in container: " +
-        ipAddressValue.error());
+  Option<string> ipAddress;
+  bool findDeprecatedIP = false;
+  Result<JSON::String> networkModeValue =
+    json.find<JSON::String>("HostConfig.NetworkMode");
+  if (!networkModeValue.isSome()) {
+    // We need to fail back to the old field as Docker added NetworkMode
+    // since Docker remote API 1.15.
+    VLOG(1) << "Unable to detect HostConfig.NetworkMode, attempting deprecated "
+            << "IP field";
+    findDeprecatedIP = true;
+  } else {
+    string addressLocation = "NetworkSettings.Networks." +
+                             networkModeValue.get().value + ".IPAddress";
+
+    Result<JSON::String> ipAddressValue =
+      json.find<JSON::String>(addressLocation);
+
+    if (!ipAddressValue.isSome()) {
+      // We also need to failback to the old field as the IP Address
+      // field location also changed since Docker remote API 1.20.
+      VLOG(1) << "Unable to detect IP Address at '" << addressLocation << "',"
+              << " attempting deprecated field";
+      findDeprecatedIP = true;
+    } else if (!ipAddressValue->value.empty()) {
+      ipAddress = ipAddressValue->value;
+    }
   }
 
-  Option<string> ipAddress;
-  if (!ipAddressValue->value.empty()) {
-    ipAddress = ipAddressValue->value;
+  if (findDeprecatedIP) {
+    Result<JSON::String> ipAddressValue =
+      json.find<JSON::String>("NetworkSettings.IPAddress");
+
+    if (ipAddressValue.isNone()) {
+      return Error("Unable to find NetworkSettings.IPAddress in container");
+    } else if (ipAddressValue.isError()) {
+      return Error(
+        "Error finding NetworkSettings.IPAddress in container: " +
+        ipAddressValue.error());
+    } else if (!ipAddressValue->value.empty()) {
+      ipAddress = ipAddressValue->value;
+    }
   }
 
   return Docker::Container(output, id, name, optionalPid, started, ipAddress);
